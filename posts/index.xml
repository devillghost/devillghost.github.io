<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kiran Dachiraju</title>
    <link>https://devillghost.github.io/posts/</link>
    <description>Recent content in Posts on Kiran Dachiraju</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://devillghost.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3 steps to analyze source code with SonarQube by using Docker</title>
      <link>https://devillghost.github.io/2019/firstblog/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devillghost.github.io/2019/firstblog/</guid>
      <description>Recently I have tried to leverage SonarQube in order to do a static analysis of the java code. In this article, weâ€™re going to be looking at static code analysis with SonarQube in 3 steps by using docker for beginners.
 What is SonarQube?  SonarQube is an open-source platform for continuous inspection of code quality. Using static code analysis, it tries to detect bugs, code smells and security vulnerabilities on 20+ programming languages.</description>
    </item>
    
  </channel>
</rss>