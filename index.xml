<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kiran Dachiraju on Kiran Dachiraju</title>
    <link>https://devillghost.github.io/</link>
    <description>Recent content in Kiran Dachiraju on Kiran Dachiraju</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Mar 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>3 steps to analyze source code with SonarQube by using Docker</title>
      <link>https://devillghost.github.io/2019/firstblog/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devillghost.github.io/2019/firstblog/</guid>
      <description>&lt;p&gt;Recently I have tried to leverage SonarQube in order to do a static analysis of the java code. In this article, we’re going to be looking at static code analysis with SonarQube in 3 steps by using docker for beginners.&lt;/p&gt;

&lt;h2&gt; What is SonarQube? &lt;/h2&gt;
SonarQube is an open-source platform for continuous inspection of code quality. Using static code analysis, it tries to detect bugs, code smells and security vulnerabilities on 20+ programming languages. SonarQube offers reports on duplicated code, coding standards, unit tests, code coverage, code complexity, comments, bugs, and security vulnerabilities.

Alright, let’s start…

To start with SonarQube first you should know about what is Sonar Server and Sonar Runner. Sonar Server where the engine that performs the analysis and stores the results, and the analysis must be invoked in some way, which can be done with a client called Sonar Runner aka SonarQube scanner or with a Maven plug-in. You can also integrate the analysis with the IDE that you are using, with a plugin called SonarLint.

I’ll start by assuming that you already have Docker installed, otherwise the process is quite simple and can be seen [here](https://docs.docker.com/v17.12/install/).

&lt;h2&gt; Below are the 3 steps we’re going to be looking at &lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Setting up Sonar Server&lt;/li&gt;
&lt;li&gt;Setting up Sonar Runner&lt;/li&gt;
&lt;li&gt;Run SonarQube Runner&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt; Step 1: Setting up the Sonar Server &lt;/h2&gt;

&lt;p&gt;By running the below commands can easily install and set up the Sonar server&lt;/p&gt;

&lt;p&gt;&amp;lt; docker pull sonarqube &amp;gt;
&amp;lt; docker run -d &amp;ndash;name sonarqube -p 9000:9000 -p 9092:9092 sonarqube &amp;gt;&lt;/p&gt;

&lt;p&gt;Now, you can browse to &lt;a href=&#34;http://localhost:9000&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://localhost:9000&lt;/a&gt;, and you’ll be looking at the SonarQube Web GUI. By default, Sonar server uses below details for login.&lt;/p&gt;

&lt;p&gt;User name: admin
Password: admin&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://devillghost.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devillghost.github.io/about/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m Kiran Kumar, I&amp;rsquo;m a Information Security Engineer. Passionate about learning new things and sharing things I know. I tend to drift towards things that are seemingly difficult. I have interests in a variety of areas playing badminton, trekking, camping, biking etc..&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>